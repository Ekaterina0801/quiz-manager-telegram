package com.Quiz_manager.domain
import com.Quiz_manager.dto.response.EventResponseDto
import com.Quiz_manager.enums.Role
import com.Quiz_manager.service.EventService
import com.Quiz_manager.service.TeamService
import com.Quiz_manager.service.TelegramService
import com.Quiz_manager.service.UserService
import org.springframework.beans.factory.annotation.Value
import org.springframework.context.annotation.Lazy
import org.springframework.stereotype.Component
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient
import org.telegram.telegrambots.longpolling.BotSession
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer
import org.telegram.telegrambots.longpolling.starter.AfterBotRegistration
import org.telegram.telegrambots.longpolling.starter.SpringLongPollingBot
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.exceptions.TelegramApiException
import org.telegram.telegrambots.meta.generics.TelegramClient


@Component
class MyTelegramBot(
    @Value("\${telegram.bot_token}") private val botToken: String,
    private val eventService: EventService,
    @Lazy
    private val teamService: TeamService,
    private val userService: UserService,
    @Lazy
    private val telegramService: TelegramService
) : SpringLongPollingBot, LongPollingSingleThreadUpdateConsumer {

    private val telegramClient: TelegramClient = OkHttpTelegramClient(getBotToken())
    private val userWaitingForTeamName = mutableMapOf<String, String>() // userId -> chatId
    private val userWaitingForDeletionConfirmation = mutableMapOf<String, Long>() // userId -> teamId

    override fun getUpdatesConsumer(): LongPollingUpdateConsumer = this

    final override fun getBotToken(): String = botToken

    override fun consume(update: Update) {
        if (update.hasMessage() && update.message.hasText()) {
            val messageText: String = update.message.text.lowercase()
            val chatId: String = update.message.chatId.toString()
            val userId: String = update.message.from.id.toString()

            when {
                messageText == "/—Å—Ç–∞—Ä—Ç" -> handleTeamCreation(userId, chatId)
                messageText == "/—É–¥–∞–ª–∏—Ç—å_–∫–æ–º–∞–Ω–¥—É" -> handleDeleteTeamRequest(userId, chatId)
                messageText == "/–∏–≥—Ä—ã" -> handleGetEvents(userId, chatId)
                messageText == "/–∏–Ω—Ñ–æ" -> handleInfoCommand(chatId)
                userWaitingForTeamName.containsKey(userId) -> handleNewTeamName(userId, chatId, messageText)
                userWaitingForDeletionConfirmation.containsKey(userId) -> handleDeleteConfirmation(userId, chatId, messageText)
            }
        }
    }


    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ. –ï—Å–ª–∏ –µ—Å—Ç—å - –≤—ã–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç.
     */
    private fun handleNewTeamName(userId: String, chatId: String, teamName: String) {
        userWaitingForTeamName.remove(userId)

        val existingTeam = teamService.getTeamByChatId(chatId)
        if (existingTeam != null && existingTeam.name.equals(teamName, ignoreCase = true)) {
            sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return
        }

        try {
            val newTeam = teamService.createTeam(teamName, chatId)
            sendMessage(
                chatId,
                "–ö–æ–º–∞–Ω–¥–∞ \"$teamName\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ\n" +
                        "–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${newTeam.inviteCode}\n" +
                        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üî•"
            )
        } catch (e: Exception) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${e.message}")
        }
    }




    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –∏–Ω–∞—á–µ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
     */


    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω.
     */
    private fun handleDeleteTeamRequest(userId: String, chatId: String) {
        val team = teamService.getTeamByChatId(chatId)
        val user = userService.getUserByTelegramId(userId)
        if (team == null) {
            sendMessage(chatId, "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        }

        if (!userService.isUserAdmin(user!!.id, team.id)) {
            sendMessage(chatId, "–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return
        }

        sendMessage(chatId, "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É \"${team.name}\"? –û—Ç–ø—Ä–∞–≤—å—Ç–µ \"–¥–∞\" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        userWaitingForDeletionConfirmation[userId] = team.id
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç "–¥–∞", –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª—è–µ—Ç—Å—è.
     */
    private fun handleDeleteConfirmation(userId: String, chatId: String, messageText: String) {
        val teamId = userWaitingForDeletionConfirmation.remove(userId) ?: return

        if (messageText == "–¥–∞") {
            try {
                teamService.deleteTeamById(teamId)
                sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! ‚ùå")
            } catch (e: Exception) {
                sendMessage(chatId, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${e.message}")
            }
        } else {
            sendMessage(chatId, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        }
    }

    private fun handleGetEvents(userId: String, chatId: String) {
        val user = userService.getUserByTelegramId(userId)
        val team = teamService.getTeamByChatId(chatId)
        if (user == null) {
            sendMessage(chatId, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            return
        }
        val events = eventService.getEventsByTeamId(team!!.id)
        sendMessage(chatId, formatEventsMessage(events))
    }

    fun sendMessage(chatId: String, text: String) {
        val message = SendMessage.builder()
            .chatId(chatId)
            .text(text)
            .build()
        try {
            telegramClient.execute(message)
        } catch (e: TelegramApiException) {
            println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
        }
    }

    private fun formatEventsMessage(events: List<EventResponseDto>): String {
        return if (events.isEmpty()) {
            "–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä"
        } else {
            "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:\n" +
                    events.joinToString("\n") { "${it.dateTime}: ${it.name}" }
        }
    }

    private fun handleTeamCreation(userId: String, chatId: String) {
        val existingTeam = teamService.getTeamByChatId(chatId)
        if (existingTeam != null) {
            sendMessage(chatId, "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞: \"${existingTeam.name}\".")
            return
        }
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:")

        userWaitingForTeamName[userId] = chatId
    }


    private fun handleInfoCommand(chatId: String) {
        val infoMessage = """
        ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
        
        üîπ `/—Å—Ç–∞—Ä—Ç` ‚Äî –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.
        üîπ `/—É–¥–∞–ª–∏—Ç—å_–∫–æ–º–∞–Ω–¥—É` ‚Äî –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω, —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è).
        üîπ `/–∏–≥—Ä—ã` ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≥—Ä.
        üîπ `/–∏–Ω—Ñ–æ` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
        
        ‚ö† –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —á–∞—Ç–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.
    """.trimIndent()

        sendMessage(chatId, infoMessage)
    }

    @AfterBotRegistration
    fun afterRegistration(botSession: BotSession) {
        println("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –°—Ç–∞—Ç—É—Å: ${botSession.isRunning}")
    }
}
