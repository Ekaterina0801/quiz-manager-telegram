package com.Quiz_manager.service

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service

@Service
class TelegramService(
    private val telegramClient: TelegramBotClient,
) {

    companion object {
        private val logger = LoggerFactory.getLogger(TelegramService::class.java)
        private const val TEST_MESSAGE = "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram-—á–∞–Ω–∞–ª—É"
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-—á–∞—Ç (–∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É).
     *
     * @param rawChatId ‚Äî ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "@my_channel" –∏–ª–∏ "-123456789")
     * @param text      ‚Äî —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è (MarkdownV2 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
     */
    fun sendMessageToChat(rawChatId: String?, text: String) {
        val chatId = normalizeChatId(rawChatId)
        if (chatId=="")
            return
        try {
            val resp = telegramClient.sendMessage(
                chatId    = chatId,
                text      = text,
                parseMode = "HTML"
            )
            if (!resp.ok) {
                logger.error("Telegram notification failed to $chatId: ${resp.description}")
            }
        } catch (ex: Exception) {
            logger.error("Exception while sending Telegram message to $chatId", ex)
        }
    }

    /**
     * –®–ª—ë—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞.
     *
     * @param rawChatId ‚Äî ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
     * @return true, –µ—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç ok=true), –∏–Ω–∞—á–µ false
     */
    fun pingChat(rawChatId: String?): Boolean {
        val chatId = normalizeChatId(rawChatId)
        return try {
            val resp = telegramClient.sendMessage(
                chatId    = chatId,
                text      = TEST_MESSAGE,
                parseMode = "HTML"
            )
            if (!resp.ok) {
                logger.warn("Ping to Telegram-chat $chatId failed: ${resp.description}")
            }
            resp.ok
        } catch (ex: Exception) {
            logger.error("Exception while pinging Telegram-chat $chatId", ex)
            false
        }
    }

    private fun normalizeChatId(rawChatId: String?): String {
        val id = rawChatId?.takeIf { it.isNotBlank() } ?: ""
        return id
    }
}
